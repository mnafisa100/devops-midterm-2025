apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-api
  namespace: techcommerce
  labels:
    app: product-api
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: product-api
  template:
    metadata:
      labels:
        app: product-api
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: product-api-sa
      imagePullSecrets:
        - name: docker-registry-secret
      containers:
        - name: product-api
          image: docker.io/yourusername/techcommerce-product-api:1.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP

          # Environment variables
          env:
            - name: FLASK_ENV
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: FLASK_ENV
            - name: WORKERS
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: WORKERS
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DATABASE_URL
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: API_KEY

          # Resource limits and requests (for HPA calculations)
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 1Gi

          # Liveness probe - detects if container is alive
          livenessProbe:
            httpGet:
              path: /api/health
              port: 5000
            initialDelaySeconds: 20
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3

          # Readiness probe - detects if ready to receive traffic
          readinessProbe:
            httpGet:
              path: /api/health
              port: 5000
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 2

          # Startup probe - gives time for app to initialize
          startupProbe:
            httpGet:
              path: /api/health
              port: 5000
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30

          # Security context
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

          # Volume mounts
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: var-run
              mountPath: /var/run

      # Pod-level security context
      securityContext:
        fsGroup: 1001

      # Volumes
      volumes:
        - name: tmp
          emptyDir: {}
        - name: var-run
          emptyDir: {}

      # Pod disruption budget for voluntary evictions
      terminationGracePeriodSeconds: 30

      # Affinity rules
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - product-api
                topologyKey: kubernetes.io/hostname

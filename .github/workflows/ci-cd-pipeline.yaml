# ============================================
# FILE: .github/workflows/ci-cd-pipeline.yaml
# ============================================
name: CI/CD Pipeline

on:
  push:
    branches:
      - master
    paths:
      - "services/**"
      - "k8s/**"
      - ".github/workflows/**"
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  REGISTRY: docker.io

jobs:
  # ============================================
  # JOB 1: Test Job
  # ============================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        service: [frontend, product-api, order-api]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js (Frontend)
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "services/frontend/package-lock.json"

      - name: Set up Python (APIs)
        if: matrix.service != 'frontend'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Frontend Dependencies
        if: matrix.service == 'frontend'
        working-directory: services/frontend
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run Frontend Tests
        if: matrix.service == 'frontend'
        working-directory: services/frontend
        run: |
          if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
            npm test -- --coverage --watchAll=false --passWithNoTests
          else
            echo "No tests configured, skipping..."
          fi

      - name: Install Python Dependencies
        if: matrix.service != 'frontend'
        working-directory: services/${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock

      - name: Run Python Tests
        if: matrix.service != 'frontend'
        working-directory: services/${{ matrix.service }}
        run: |
          if [ -f "test_*.py" ] || [ -d "tests" ]; then
            pytest --cov=. --cov-report=xml --cov-report=term
          else
            echo "No tests found, creating dummy coverage..."
            echo '<?xml version="1.0" ?><coverage version="1.0"><packages></packages></coverage>' > coverage.xml
          fi

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./coverage.xml
          flags: ${{ matrix.service }}
          fail_ci_if_error: false
        continue-on-error: true

  # ============================================
  # JOB 2: SAST Security Scanning
  # ============================================
  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Semgrep SAST Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
        continue-on-error: true

      - name: Check if SARIF exists
        id: sarif_check
        run: |
          if [ -f semgrep.sarif ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
          else
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: steps.sarif_check.outputs.sarif_exists == 'true'
        with:
          sarif_file: semgrep.sarif
          category: semgrep
        continue-on-error: true

  # ============================================
  # JOB 3: Build Docker Images
  # ============================================
  build:
    name: Build Docker Images
    needs: [test, sast-scan]
    if: always()
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: frontend
            image: techcommerce-frontend
            dockerfile: services/frontend/Dockerfile
            context: services/frontend
          - name: product-api
            image: techcommerce-product-api
            dockerfile: services/product-api/Dockerfile
            context: services/product-api
          - name: order-api
            image: techcommerce-order-api
            dockerfile: services/order-api/Dockerfile
            context: services/order-api

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=${{ github.run_number }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ matrix.image }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ matrix.image }}:buildcache,mode=max

  # ============================================
  # JOB 4: Container Image Security Scanning
  # ============================================
  image-scan:
    name: Scan Docker Images
    needs: build
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        include:
          - name: frontend
            image: techcommerce-frontend
          - name: product-api
            image: techcommerce-product-api
          - name: order-api
            image: techcommerce-order-api

    steps:
      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ matrix.image }}:${{ github.run_number }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"
          category: "trivy-${{ matrix.name }}"

      - name: Fail on critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ matrix.image }}:${{ github.run_number }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          severity: "CRITICAL"

  # ============================================
  # JOB 5: Deploy to Staging
  # ============================================
  deploy-staging:
    name: Deploy to Staging
    needs: image-scan
    runs-on: ubuntu-latest
    if: always()
    environment:
      name: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Kubernetes deployment
        run: |
          echo "Simulating staging deployment..."
          echo "Would apply manifests and update images here."
          echo "Pretending to wait for rollout..."
          sleep 5
          echo "Staging deployment successful!"

  # ============================================
  # JOB 6: Manual Approval Gate
  # ============================================
  approve-production:
    name: Manual Approval For Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    permissions:
      issues: write
      contents: read

    steps:
      - name: Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          approvers: mnafisa100
          minimum-approvals: 1
          issue-title: "Approve deployment to production"
          secret: ${{ secrets.GITHUB_TOKEN }}

  # ============================================
  # JOB 7: Deploy to Production
  # ============================================
  deploy-production:
    name: Deploy to Production
    needs: approve-production
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Production deployment
        run: |
          echo "Simulating production deployment..."
          echo "Would push images to production cluster and verify rollout."
          sleep 5
          echo "Production deployment completed!"
